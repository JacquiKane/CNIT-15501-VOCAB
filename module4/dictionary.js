/** @format */

const dictionary = {
  "Boolean Value":
    "Can be either True or false,<br>isValid = True<br>isOpen = False .....",
  and: "Boolean operator<br>Given 2 inputs, both have to be True, for result to be True.",
  or: "Boolean operator<br>Given 2 inputs, only one input has to be True, for result to be True.",
  not: "Boolean operator. Given input of True, result is False. Given input of False, result is True.",
  "random number":
    "True random number is generated by a random process, like throwing a dice, asking an individual to state a number between 0 and 100 ...",
  "pseudo-random number":
    "number produced by a digital process, supported by an algorithm intended to mimic the generation of a true random number",
  RNG: "acronym, <em>R</em>andom <em>N</em>umber <em>G</em>enerator, also <em>PRNG</em>, <em>P</em>seudo-RNG, <em>D</em>igital-RNG",
  "deterministic, in computing!'":
    "deterministic algorithm is an algorithm that, given a particular input, will produce same output",
  "complex Boolean expression":
    'Boolean expression comprised of other Boolean expressions, joined by logic operator like <em>and, or</em><ul style="font-size:smaller"><li>(count &lt; 7) and (index &gt; 0)<li>(count &lt; 7) or (count &gt; 0)</ul>',
  Tautology:
    'Boolean expression that always evaluates to True,like<br><p style="font-size:smaller"> <i>(x &gt; 7) or (x &lt;= 7)</i></p>',
  Contradiction:
    'Boolean expression that always evaluates to False, like<br><p style="font-size:smaller"> <i>(x &gt; 7) and (x &lt;= 7)</p>',
  "De Morgan's Law":
    'Rule to simplify complex Boolean expressions<ul style="font-size:smaller"><li>not(A and B) = not(A) or not(B)<li>not(A or B) = not(A) and not(B) ',
  "Coding Structures":
    "Main coding structures are ...<ul><li>Sequential<li>Selection (if)<li>Repetition (loops)</ul>",
  "Boolean Operators":
    "Operators that support Boolean Logic operations. Basic operators are AND, OR, NOT.",
  "Truth Tables": "Tabulation of result, given input values of True, False.",
  "AND Truth Table":
    "<table><tr><th>AND</th><th>#1</th><th>#2</th><td>result</td></tr><tr><td></td><td>F</td><td>F</td><td>F</td></tr><tr><td></td><td>F</td><td>T</td><td>F</td></tr><tr><td></td><td>T</td><td>F</td><td>F</td></tr><tr><td></td><td>T</td><td>T</td><td>T</td></tr><table> ",
  "OR Truth Table":
    "<table><tr><th>OR</th><th>#1</th><th>#2</th><td>result</td></tr><tr><td></td><td>F</td><td>F</td><td>F</td></tr><tr><td></td><td>F</td><td>T</td><td>T</td></tr><tr><td></td><td>T</td><td>F</td><td>T</td></tr><tr><td></td><td>T</td><td>T</td><td>T</td></tr><table>",
  "NOT Truth Table":
    "<table><tr><th>NOT</th><th>#1</th><td>result</td></tr><tr><td></td><td>F</td><td>T</td></tr><tr><td></td><td>T</td><td>F</td></tr><table>",
  "Logic Precedence Rules":
    "Rules governing the order of evaluation of Boolean expressions.<ol><li>not(highest)<li>and<li>or(lowest)</ol>",
  loop: "structure that supports repetition, iteration - code is repeated a discrete number of times, or infinitely.<ul><li>while loop<li>for loop</ul>",
  "loop variable, sentry variable":
    "variable that controls how many times a loop iterates, like <i>index</i>, below.<p>while (index &lt; 7):<br>&nbsp;&nbsp;index += 1<br>&nbsp;&nbsp;.....</p>",
  "body of loop":
    'code executed each iteration of a loop, like lines 2, 3 below, <br><p style="font-size:smaller">1&nbsp;&nbsp;while (index &lt; 7):<br><em><i>2&nbsp;&nbsp;&nbsp;&nbsp;index += 1<br>3&nbsp;&nbsp;&nbsp;&nbsp;.....</em></i></p>',
};
